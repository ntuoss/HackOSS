{"version":3,"file":"artworks.repository.js","sourceRoot":"","sources":["../../src/artworks/artworks.repository.ts"],"names":[],"mappings":";;;AAIA,kCAA2D;AAC3D,2CAAyC;AAEzC,8BAA2B;AAK3B,IAAM,2BAA2B,GAA2C;IACxE,OAAO,EAAE,OAAO;CACnB,CAAC;AASF;IAMI,4BACI,eAAmC,EACnC,gBAAkC;QAFtC,iBAgBC;QAZG,IAAI,CAAC,kBAAkB,GAAG,eAAe,CAAC;QAC1C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAEzE,wBAAU,CAAC,aAAa,GAAG,UAAC,SAAiB,IAAK,OAAA,IAAI,OAAO,CAAC,UAAO,OAAO;;;;4BAC5D,qBAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAA;;wBAA9C,GAAG,GAAG,SAAwC;wBACpD,IAAI,GAAG,CAAC,MAAM,EAAE;4BACZ,OAAO,EAAE,CAAC;yBACb;6BAAM;4BACH,OAAO,CAAC,qBAAmB,SAAS,gCAA6B,CAAC,CAAC;yBACtE;;;;aACJ,CAAC,EAPgD,CAOhD,CAAC;IACP,CAAC;IAEK,0CAAa,GAAnB,UAAoB,OAAmB;;;;;;wBAC7B,UAAU,GAAkC;4BAC9C,KAAK,EAAE,OAAO,CAAC,KAAK;4BACpB,QAAQ,EAAE,OAAO,CAAC,QAAQ;4BAC1B,YAAY,EAAE,OAAO,CAAC,YAAY;4BAClC,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC;yBAC7D,CAAC;wBACF,qBAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,EAAA;;wBAAnC,SAAmC,CAAC;;;;;KACvC;IAEK,wCAAW,GAAjB,UACI,OAA2B,EAC3B,KAAkB,EAClB,OAAmC,EACnC,SAAsD;QAHtD,wBAAA,EAAA,YAA2B;QAC3B,sBAAA,EAAA,UAAkB;QAClB,wBAAA,EAAA,iBAAmC;QACnC,0BAAA,EAAA,iBAAsD;;;;;;;wBAEhD,WAAW,GAAG,2BAA2B,CAAC,OAAO,CAAC,CAAC;wBACzC,qBAAM,kBAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,GAAG,EAAE,EAAA;;wBAAvF,OAAO,GAAG,SAA6E;wBAC7F,sBAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,cAAM,CAAkB,GAAG,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAA3D,CAA2D,CAAC,CAAC,EAAC;;;;KAC5G;IAEK,uCAAU,GAAhB,UAAiB,EAAU;;;;;;wBACjB,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;wBACtB,qBAAM,GAAG,CAAC,GAAG,EAAE,EAAA;;wBAArB,GAAG,GAAG,SAAe;wBAC3B,sBAAO,IAAI,CAAC,SAAS,CAAC,cAAM,CAAkB,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,EAAC;;;;KAClE;IAEa,sCAAS,GAAvB,UAAwB,IAAqB;;;;;;wBACnC,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;kCAExD,IAAI;;wBACC,qBAAM,MAAM,EAAA;4BAFxB,iEAEI,SAAM,GAAE,SAAY,UACtB;;;;KACL;IAEL,yBAAC;AAAD,CAAC,AA3DD,IA2DC;AA3DY,gDAAkB","sourcesContent":["import { FirebaseRepository } from '../firebase/firebase.repository';\nimport { Artwork } from './artwork';\nimport { FirebaseArtwork } from './artwork.firebase';\nimport { PeopleRepository } from '../people/people.repository';\nimport { withId, QueryFilter, buildQuery } from '../utils';\nimport { validators } from 'validate.js';\nimport * as firebase from 'firebase/app';\nimport 'firebase/firestore'\nimport _ from 'lodash';\n\nexport type ArtworksOrderKey = 'title';\n\nconst ARTWORKS_ORDER_KEY_PATH_MAP: { [key in ArtworksOrderKey]: string; } = {\n    'title': 'title'\n};\n\nexport interface NewArtwork {\n    title: string;\n    imageUrl: string;\n    artistId: string;\n    eventbriteId: string;\n}\n\nexport class ArtworksRepository {\n\n    private firebaseRepository: FirebaseRepository;\n    private peopleRepository: PeopleRepository;\n    artworks: firebase.firestore.CollectionReference;\n\n    constructor(\n        firebaseService: FirebaseRepository,\n        peopleRepository: PeopleRepository\n    ) {\n        this.firebaseRepository = firebaseService;\n        this.peopleRepository = peopleRepository;\n        this.artworks = this.firebaseRepository.firestore.collection('artworks');\n\n        validators.artworkExists = (artworkId: string) => new Promise(async (resolve) => {\n            const doc = await this.artworks.doc(artworkId).get();\n            if (doc.exists) {\n                resolve();\n            } else {\n                resolve(`Artwork with ID ${artworkId} does not exist in Firebase`);\n            }\n        });\n    }\n\n    async createArtwork(artwork: NewArtwork) {\n        const newArtwork: _.Omit<FirebaseArtwork, 'id'> = {\n            title: artwork.title,\n            imageUrl: artwork.imageUrl,\n            eventbriteId: artwork.eventbriteId,\n            artist: this.peopleRepository.people.doc(artwork.artistId)\n        };\n        await this.artworks.add(newArtwork);\n    }\n\n    async getArtworks(\n        filters: QueryFilter[] = [],\n        limit: number = 10,\n        orderBy: ArtworksOrderKey = 'title',\n        direction: firebase.firestore.OrderByDirection = 'asc'\n    ): Promise<Artwork[]> {\n        const orderByPath = ARTWORKS_ORDER_KEY_PATH_MAP[orderBy];\n        const results = await buildQuery(this.artworks, limit, orderByPath, direction, filters).get();\n        return Promise.all(results.docs.map(doc => this.toArtwork(withId<FirebaseArtwork>(doc.data(), doc.id))));\n    }\n\n    async getArtwork(id: string): Promise<Artwork> {\n        const ref = this.artworks.doc(id);\n        const doc = await ref.get();\n        return this.toArtwork(withId<FirebaseArtwork>(doc.data(), id));\n    }\n\n    private async toArtwork(data: FirebaseArtwork): Promise<Artwork> {\n        const artist = this.peopleRepository.getPerson(data.artist.id);\n        return {\n            ...data,\n            artist: await artist\n        };\n    }\n\n}\n"]}