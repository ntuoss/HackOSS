{"version":3,"file":"events.repository.js","sourceRoot":"","sources":["../../src/events/events.repository.ts"],"names":[],"mappings":"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","sourcesContent":["import { FirebaseRepository } from '../firebase/firebase.repository';\nimport { PeopleRepository } from '../people/people.repository';\nimport { LocationsRepository } from '../locations/locations.repository';\nimport { Event, Speaker, Prerequisite, Dependency, EventStatus, Publication } from './event';\nimport { FirebaseEvent, FirebaseEventSpeaker } from './event.firebase';\nimport { OrganisationsRepository } from '../organisations/organisations.repository';\nimport { ArtworksRepository } from '../artworks/artworks.repository';\nimport { withId, QueryFilter, buildQuery } from '../utils';\nimport { validators } from 'validate.js';\nimport * as firebase from 'firebase/app';\nimport _ from 'lodash';\n\nexport type EventsOrderKey = 'date' | 'title';\n\nconst EVENTS_ORDER_KEY_PATH_MAP: { [key in EventsOrderKey]: string; } = {\n    'date': 'startTime',\n    'title': 'title'\n};\n\nexport interface NewEvent {\n    tgif: number;\n    title: string;\n    endTime: Date;\n    tagline: string;\n    bannerId: string;\n    prerequisites: Prerequisite[];\n    description: string;\n    startTime: Date;\n    dependencies: Dependency[];\n    promotion: string;\n    venueId: string;\n    githubUrl: string;\n    status: EventStatus;\n    isPublic: boolean;\n    isExternal: boolean;\n    hasFood: boolean;\n    hasDrinks: boolean;\n    remarks: string;\n    eventbrite: Publication;\n    facebook: Publication;\n    speakers: {\n        personId: string;\n        organisationId: string;\n        position: string;\n    }[];\n}\n\nexport class EventsRepository {\n\n    private firebaseRepository: FirebaseRepository;\n    private peopleRepository: PeopleRepository;\n    private locationRepository: LocationsRepository;\n    private organisationsRepository: OrganisationsRepository;\n    private artworksRepository: ArtworksRepository;\n    events: firebase.firestore.CollectionReference;\n\n    constructor(\n        firebaseRepository: FirebaseRepository,\n        peopleRepository: PeopleRepository,\n        locationRepository: LocationsRepository,\n        organisationsRepository: OrganisationsRepository,\n        artworksRepository: ArtworksRepository\n    ) {\n\n        this.firebaseRepository = firebaseRepository;\n        this.peopleRepository = peopleRepository;\n        this.locationRepository = locationRepository;\n        this.organisationsRepository = organisationsRepository;\n        this.artworksRepository = artworksRepository;\n\n        this.events = this.firebaseRepository.firestore.collection('events');\n\n        validators.tgifUnique = (tgif: number) => new Promise(async (resolve) => {\n            const doc = await this.events.where('tgif', '==', tgif).get();\n            if (doc.docs.length === 0) {\n                resolve();\n            } else {\n                resolve(`Event with TGIFHacks # ${tgif} already exists in Firebase`);\n            }\n        });\n    }\n\n    async createEvent(event: NewEvent) {\n        const newEvent: _.Omit<FirebaseEvent, 'id'> = {\n            tgif: event.tgif,\n            title: event.title,\n            description: event.description,\n            tagline: event.tagline,\n            prerequisites: event.prerequisites,\n            dependencies: event.dependencies,\n            promotion: event.promotion,\n            githubUrl: event.githubUrl,\n            status: event.status,\n            isPublic: event.isPublic,\n            isExternal: event.isExternal,\n            hasFood: event.hasFood,\n            hasDrinks: event.hasDrinks,\n            remarks: event.remarks,\n            eventbrite: event.eventbrite,\n            facebook: event.facebook,\n            startTime: firebase.firestore.Timestamp.fromDate(event.startTime),\n            endTime: firebase.firestore.Timestamp.fromDate(event.endTime),\n            banner: this.artworksRepository.artworks.doc(event.bannerId),\n            venue: this.locationRepository.locations.doc(event.venueId),\n            speakers: event.speakers.map<FirebaseEventSpeaker>(speaker => ({\n                person: this.peopleRepository.people.doc(speaker.personId),\n                organisation: this.organisationsRepository.organisations.doc(speaker.organisationId),\n                position: speaker.position\n            }))\n        };\n        this.events.add(newEvent);\n    }\n\n    async getEvents(\n        filters: QueryFilter[] = [],\n        limit: number = 10,\n        orderBy: EventsOrderKey = 'date',\n        direction: firebase.firestore.OrderByDirection = 'desc'\n    ): Promise<Event[]> {\n        const orderByPath = EVENTS_ORDER_KEY_PATH_MAP[orderBy];\n        const results = await buildQuery(this.events, limit, orderByPath, direction, filters).get();\n        return Promise.all(results.docs.map(doc => this.toEvent(withId<FirebaseEvent>(doc.data(), doc.id))));\n    }\n\n    async getEvent(id: string): Promise<Event> {\n        const ref = this.events.doc(id);\n        const doc = await ref.get();\n        return this.toEvent(withId<FirebaseEvent>(doc.data(), id));\n    }\n\n    private async toEvent(data: FirebaseEvent): Promise<Event> {\n\n        const speakers = data.speakers.map(async (speaker): Promise<Speaker> => {\n            const person = this.peopleRepository.getPerson(speaker.person.id);\n            const organisation = this.organisationsRepository.getOrganisation(speaker.organisation.id);\n            return {\n                person: await person,\n                organisation: await organisation,\n                position: speaker.position\n            };\n        });\n\n        const banner = this.artworksRepository.getArtwork(data.banner.id);\n        const venue = this.locationRepository.getLocation(data.venue.id);\n\n        return _.assign(data, {\n            speakers: await Promise.all(speakers),\n            banner: await banner,\n            venue: await venue,\n            startTime: data.startTime.toDate(),\n            endTime: data.endTime.toDate()\n        });\n    }\n}\n"]}