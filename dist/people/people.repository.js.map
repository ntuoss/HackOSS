{"version":3,"file":"people.repository.js","sourceRoot":"","sources":["../../src/people/people.repository.ts"],"names":[],"mappings":";;;AAGA,kCAA2D;AAC3D,2CAAyC;AAMzC,IAAM,yBAAyB,GAAyC;IACpE,MAAM,EAAE,MAAM;CACjB,CAAC;AAUF;IAKI,0BAAY,eAAmC;QAA/C,iBAYC;QAXG,IAAI,CAAC,kBAAkB,GAAG,eAAe,CAAC;QAC1C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAErE,wBAAU,CAAC,YAAY,GAAG,UAAC,QAAgB,IAAK,OAAA,IAAI,OAAO,CAAC,UAAO,OAAO;;;;4BAC1D,qBAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,EAAA;;wBAA3C,GAAG,GAAG,SAAqC;wBACjD,IAAI,GAAG,CAAC,MAAM,EAAE;4BACZ,OAAO,EAAE,CAAC;yBACb;6BAAM;4BACH,OAAO,CAAC,oBAAkB,QAAQ,gCAA6B,CAAC,CAAC;yBACpE;;;;aACJ,CAAC,EAP8C,CAO9C,CAAC;IACP,CAAC;IAEK,uCAAY,GAAlB,UAAmB,MAAiB;;;;;;wBAC1B,SAAS,GAAiC,MAAM,CAAC;wBACvD,qBAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,EAAA;;wBAAhC,SAAgC,CAAC;;;;;KACpC;IAEK,oCAAS,GAAf,UACI,OAA2B,EAC3B,KAAkB,EAClB,OAAgC,EAChC,SAAsD;QAHtD,wBAAA,EAAA,YAA2B;QAC3B,sBAAA,EAAA,UAAkB;QAClB,wBAAA,EAAA,gBAAgC;QAChC,0BAAA,EAAA,iBAAsD;;;;;;;wBAEhD,WAAW,GAAG,yBAAyB,CAAC,OAAO,CAAC,CAAC;wBACvC,qBAAM,kBAAU,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,GAAG,EAAE,EAAA;;wBAArF,OAAO,GAAG,SAA2E;wBAC3F,sBAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,cAAM,CAAiB,GAAG,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAzD,CAAyD,CAAC,EAAC;;;;KAC7F;IAEK,oCAAS,GAAf,UAAgB,EAAU;;;;;;wBAChB,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;wBACpB,qBAAM,GAAG,CAAC,GAAG,EAAE,EAAA;;wBAArB,GAAG,GAAG,SAAe;wBAC3B,sBAAO,IAAI,CAAC,QAAQ,CAAC,cAAM,CAAiB,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,EAAC;;;;KAChE;IAEO,mCAAQ,GAAhB,UAAiB,IAAoB;QACjC,OAAO,IAAI,CAAC;IAChB,CAAC;IAEL,uBAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CY,4CAAgB","sourcesContent":["import { Person } from './person';\nimport { FirebaseRepository } from '../firebase/firebase.repository';\nimport { FirebasePerson } from './person.firebase';\nimport { withId, QueryFilter, buildQuery } from '../utils';\nimport { validators } from 'validate.js';\nimport firebase from 'firebase';\nimport _ from 'lodash';\n\nexport type PeopleOrderKey = 'name';\n\nconst PEOPLE_ORDER_KEY_PATH_MAP: { [key in PeopleOrderKey]: string; } = {\n    'name': 'name'\n};\n\nexport interface NewPerson {\n    name: string;\n    about: string;\n    websiteUrl: string;\n    avatarUrl: string;\n    githubUrl: string;\n}\n\nexport class PeopleRepository {\n\n    private firebaseRepository: FirebaseRepository;\n    people: firebase.firestore.CollectionReference;\n\n    constructor(firebaseService: FirebaseRepository) {\n        this.firebaseRepository = firebaseService;\n        this.people = this.firebaseRepository.firestore.collection('people');\n\n        validators.personExists = (personId: string) => new Promise(async (resolve) => {\n            const doc = await this.people.doc(personId).get();\n            if (doc.exists) {\n                resolve();\n            } else {\n                resolve(`Person with ID ${personId} does not exist in Firebase`);\n            }\n        });\n    }\n\n    async createPerson(person: NewPerson) {\n        const newPerson: _.Omit<FirebasePerson, 'id'> = person;\n        await this.people.add(newPerson);\n    }\n\n    async getPeople(\n        filters: QueryFilter[] = [],\n        limit: number = 10,\n        orderBy: PeopleOrderKey = 'name',\n        direction: firebase.firestore.OrderByDirection = 'asc'\n    ): Promise<Person[]> {\n        const orderByPath = PEOPLE_ORDER_KEY_PATH_MAP[orderBy];\n        const results = await buildQuery(this.people, limit, orderByPath, direction, filters).get();\n        return results.docs.map(doc => this.toPerson(withId<FirebasePerson>(doc.data(), doc.id)));\n    }\n\n    async getPerson(id: string): Promise<Person> {\n        const ref = this.people.doc(id);\n        const doc = await ref.get();\n        return this.toPerson(withId<FirebasePerson>(doc.data(), id));\n    }\n\n    private toPerson(data: FirebasePerson): Person {\n        return data;\n    }\n\n}\n"]}