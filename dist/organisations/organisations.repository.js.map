{"version":3,"file":"organisations.repository.js","sourceRoot":"","sources":["../../src/organisations/organisations.repository.ts"],"names":[],"mappings":";;;AAGA,kCAA2D;AAC3D,2CAAyC;AAMzC,IAAM,gCAAgC,GAAgD;IAClF,MAAM,EAAE,MAAM;CACjB,CAAC;AAUF;IAKI,iCAAY,eAAmC;QAA/C,iBAYC;QAXG,IAAI,CAAC,kBAAkB,GAAG,eAAe,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;QAEnF,wBAAU,CAAC,kBAAkB,GAAG,UAAC,cAAsB,IAAK,OAAA,IAAI,OAAO,CAAC,UAAO,OAAO;;;;4BACtE,qBAAM,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,GAAG,EAAE,EAAA;;wBAAxD,GAAG,GAAG,SAAkD;wBAC9D,IAAI,GAAG,CAAC,MAAM,EAAE;4BACZ,OAAO,EAAE,CAAC;yBACb;6BAAM;4BACH,OAAO,CAAC,0BAAwB,cAAc,gCAA6B,CAAC,CAAC;yBAChF;;;;aACJ,CAAC,EAP0D,CAO1D,CAAC;IACP,CAAC;IAEK,oDAAkB,GAAxB,UAAyB,YAA6B;;;;;;wBAC5C,eAAe,GAAuC,YAAY,CAAC;wBACzE,qBAAM,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,eAAe,CAAC,EAAA;;wBAA7C,SAA6C,CAAC;;;;;KACjD;IAEK,kDAAgB,GAAtB,UACI,OAA2B,EAC3B,KAAkB,EAClB,OAAuC,EACvC,SAAsD;QAHtD,wBAAA,EAAA,YAA2B;QAC3B,sBAAA,EAAA,UAAkB;QAClB,wBAAA,EAAA,gBAAuC;QACvC,0BAAA,EAAA,iBAAsD;;;;;;;wBAEhD,WAAW,GAAG,gCAAgC,CAAC,OAAO,CAAC,CAAC;wBAC9C,qBAAM,kBAAU,CAAC,IAAI,CAAC,aAAa,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,GAAG,EAAE,EAAA;;wBAA5F,OAAO,GAAG,SAAkF;wBAClG,sBAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,cAAM,CAAuB,GAAG,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAArE,CAAqE,CAAC,EAAC;;;;KACzG;IAEK,iDAAe,GAArB,UAAsB,EAAU;;;;;;wBACtB,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;wBAC3B,qBAAM,GAAG,CAAC,GAAG,EAAE,EAAA;;wBAArB,GAAG,GAAG,SAAe;wBAC3B,sBAAO,IAAI,CAAC,cAAc,CAAC,cAAM,CAAuB,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,EAAC;;;;KAC5E;IAEO,gDAAc,GAAtB,UAAuB,IAA0B;QAC7C,OAAO,IAAI,CAAC;IAChB,CAAC;IAEL,8BAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CY,0DAAuB","sourcesContent":["import { FirebaseRepository } from '../firebase/firebase.repository';\nimport { Organisation } from './organisation';\nimport { FirebaseOrganisation } from './organisation.firebase';\nimport { withId, QueryFilter, buildQuery } from '../utils';\nimport { validators } from 'validate.js';\nimport * as firebase from 'firebase/app';\nimport _ from 'lodash';\n\nexport type OrganisationsOrderKey = 'name';\n\nconst ORGANISATIONS_ORDER_KEY_PATH_MAP: { [key in OrganisationsOrderKey]: string; } = {\n    'name': 'name'\n};\n\nexport interface NewOrganisation {\n    name: string;\n    about: string;\n    avatarUrl: string;\n    githubUrl: string;\n    websiteUrl: string;\n}\n\nexport class OrganisationsRepository {\n\n    private firebaseRepository: FirebaseRepository;\n    organisations: firebase.firestore.CollectionReference;\n\n    constructor(firebaseService: FirebaseRepository) {\n        this.firebaseRepository = firebaseService;\n        this.organisations = this.firebaseRepository.firestore.collection('organisations');\n\n        validators.organisationExists = (organisationId: string) => new Promise(async (resolve) => {\n            const doc = await this.organisations.doc(organisationId).get();\n            if (doc.exists) {\n                resolve();\n            } else {\n                resolve(`Organisation with ID ${organisationId} does not exist in Firebase`);\n            }\n        });\n    }\n\n    async createOrganisation(organisation: NewOrganisation) {\n        const newOrganisation: _.Omit<FirebaseOrganisation, 'id'> = organisation;\n        await this.organisations.add(newOrganisation);\n    }\n\n    async getOrganisations(\n        filters: QueryFilter[] = [],\n        limit: number = 10,\n        orderBy: OrganisationsOrderKey = 'name',\n        direction: firebase.firestore.OrderByDirection = 'asc'\n    ): Promise<Organisation[]> {\n        const orderByPath = ORGANISATIONS_ORDER_KEY_PATH_MAP[orderBy];\n        const results = await buildQuery(this.organisations, limit, orderByPath, direction, filters).get();\n        return results.docs.map(doc => this.toOrganisation(withId<FirebaseOrganisation>(doc.data(), doc.id)));\n    }\n\n    async getOrganisation(id: string): Promise<Organisation> {\n        const ref = this.organisations.doc(id);\n        const doc = await ref.get();\n        return this.toOrganisation(withId<FirebaseOrganisation>(doc.data(), id));\n    }\n\n    private toOrganisation(data: FirebaseOrganisation): Organisation {\n        return data;\n    }\n\n}\n"]}