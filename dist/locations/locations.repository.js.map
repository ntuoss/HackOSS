{"version":3,"file":"locations.repository.js","sourceRoot":"","sources":["../../src/locations/locations.repository.ts"],"names":[],"mappings":";;;AAGA,kCAA2D;AAC3D,2CAAyC;AAMzC,IAAM,4BAA4B,GAA4C;IAC1E,MAAM,EAAE,MAAM;CACjB,CAAC;AAWF;IAKI,6BAAY,kBAAsC;QAAlD,iBAYC;QAXG,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAE3E,wBAAU,CAAC,cAAc,GAAG,UAAC,UAAkB,IAAK,OAAA,IAAI,OAAO,CAAC,UAAO,OAAO;;;;4BAC9D,qBAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,EAAA;;wBAAhD,GAAG,GAAG,SAA0C;wBACtD,IAAI,GAAG,CAAC,MAAM,EAAE;4BACZ,OAAO,EAAE,CAAC;yBACb;6BAAM;4BACH,OAAO,CAAC,sBAAoB,UAAU,gCAA6B,CAAC,CAAC;yBACxE;;;;aACJ,CAAC,EAPkD,CAOlD,CAAC;IACP,CAAC;IAEK,4CAAc,GAApB,UAAqB,QAAqB;;;;;;wBAChC,WAAW,GAAmC,QAAQ,CAAC;wBAC7D,qBAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,EAAA;;wBAArC,SAAqC,CAAC;;;;;KACzC;IAEK,0CAAY,GAAlB,UACI,OAA2B,EAC3B,KAAkB,EAClB,OAAmC,EACnC,SAAsD;QAHtD,wBAAA,EAAA,YAA2B;QAC3B,sBAAA,EAAA,UAAkB;QAClB,wBAAA,EAAA,gBAAmC;QACnC,0BAAA,EAAA,iBAAsD;;;;;;;wBAEhD,WAAW,GAAG,4BAA4B,CAAC,OAAO,CAAC,CAAC;wBAC1C,qBAAM,kBAAU,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,GAAG,EAAE,EAAA;;wBAAxF,OAAO,GAAG,SAA8E;wBAC9F,sBAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,cAAM,CAAmB,GAAG,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAA7D,CAA6D,CAAC,EAAC;;;;KACjG;IAEK,yCAAW,GAAjB,UAAkB,EAAU;;;;;;wBAClB,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;wBACvB,qBAAM,GAAG,CAAC,GAAG,EAAE,EAAA;;wBAArB,GAAG,GAAG,SAAe;wBAC3B,sBAAO,IAAI,CAAC,UAAU,CAAC,cAAM,CAAmB,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,EAAC;;;;KACpE;IAEO,wCAAU,GAAlB,UAAmB,IAAsB;QACrC,OAAO,IAAI,CAAC;IAChB,CAAC;IAEL,0BAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CY,kDAAmB","sourcesContent":["import { Location } from './location';\nimport { FirebaseRepository } from '../firebase/firebase.repository';\nimport { FirebaseLocation } from './location.firebase';\nimport { withId, QueryFilter, buildQuery } from '../utils';\nimport { validators } from 'validate.js';\nimport firebase from 'firebase';\nimport _ from 'lodash';\n\nexport type LocationsOrderKey = 'name';\n\nconst LOCATIONS_ORDER_KEY_PATH_MAP: { [key in LocationsOrderKey]: string; } = {\n    'name': 'name'\n};\n\nexport interface NewLocation {\n    name: string;\n    seatingCapacity: number;\n    addressLine1: string;\n    addressLine2: string;\n    imageUrl: string;\n    eventbriteId: string;\n}\n\nexport class LocationsRepository {\n\n    private firebaseRepository: FirebaseRepository;\n    locations: firebase.firestore.CollectionReference;\n\n    constructor(firebaseRepository: FirebaseRepository) {\n        this.firebaseRepository = firebaseRepository;\n        this.locations = this.firebaseRepository.firestore.collection('locations');\n\n        validators.locationExists = (locationId: string) => new Promise(async (resolve) => {\n            const doc = await this.locations.doc(locationId).get();\n            if (doc.exists) {\n                resolve();\n            } else {\n                resolve(`Location with ID ${locationId} does not exist in Firebase`);\n            }\n        });\n    }\n\n    async createLocation(location: NewLocation) {\n        const newLocation: _.Omit<FirebaseLocation, 'id'> = location;\n        await this.locations.add(newLocation);\n    }\n\n    async getLocations(\n        filters: QueryFilter[] = [],\n        limit: number = 10,\n        orderBy: LocationsOrderKey = 'name',\n        direction: firebase.firestore.OrderByDirection = 'asc'\n    ): Promise<Location[]> {\n        const orderByPath = LOCATIONS_ORDER_KEY_PATH_MAP[orderBy];\n        const results = await buildQuery(this.locations, limit, orderByPath, direction, filters).get();\n        return results.docs.map(doc => this.toLocation(withId<FirebaseLocation>(doc.data(), doc.id)));\n    }\n\n    async getLocation(id: string): Promise<Location> {\n        const ref = this.locations.doc(id);\n        const doc = await ref.get();\n        return this.toLocation(withId<FirebaseLocation>(doc.data(), id));\n    }\n\n    private toLocation(data: FirebaseLocation): Location {\n        return data;\n    }\n\n}\n"]}