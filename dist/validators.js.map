{"version":3,"file":"validators.js","sourceRoot":"","sources":["../src/validators.ts"],"names":[],"mappings":";;AAAA,2CAAmD;AAenD,wBAAU,CAAC,UAAU,GAAG,UAAC,IAAU,EAAE,OAA6B,EAAE,GAAW,EAAE,UAAe;IAC5F,IAAM,SAAS,GAAG,UAAU,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACpD,IAAI,IAAI,IAAI,SAAS,EAAE;QACnB,OAAO,OAAO,CAAC,OAAO,IAAO,OAAO,CAAC,aAAa,kBAAa,GAAK,CAAC;KACxE;AACL,CAAC,CAAC;AAEF,wBAAU,CAAC,SAAS,GAAG,UAAC,IAAU,EAAE,OAA6B,EAAE,GAAW,EAAE,UAAe;IAC3F,IAAM,SAAS,GAAG,UAAU,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACpD,IAAI,IAAI,IAAI,SAAS,EAAE;QACnB,OAAO,OAAO,CAAC,OAAO,IAAO,OAAO,CAAC,aAAa,mBAAc,GAAK,CAAC;KACzE;AACL,CAAC,CAAC;AAEF,wBAAU,CAAC,KAAK,GAAG,UAAC,KAAY,EAAE,OAA8B,EAAE,GAAW,EAAE,UAAe;IAC1F,OAAO,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,sBAAQ,CAAC,CAAC,EAAE,OAAO,CAAC,WAAW,CAAC,EAAhC,CAAgC,CAAC,CAAC;AAC5D,CAAC,CAAC;AAEF,wBAAU,CAAC,MAAM,GAAG,UAAC,KAAU,EAAE,OAA4B,EAAE,GAAW,EAAE,UAAe;IACvF,OAAO,sBAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;AAChD,CAAC,CAAC","sourcesContent":["import { validate, validators } from 'validate.js';\n\ninterface TimeValidatorOptions {\n    timeAttribute: string;\n    message?: string;\n}\n\ninterface ArrayValidatorOptions {\n    constraints: any;\n}\n\ninterface MapValidatorOptions {\n    constraints: any;\n}\n\nvalidators.beforeTime = (time: Date, options: TimeValidatorOptions, key: string, attributes: any) => {\n    const otherTime = attributes[options.timeAttribute];\n    if (time >= otherTime) {\n        return options.message || `${options.timeAttribute} is after ${key}`;\n    }\n};\n\nvalidators.afterTime = (time: Date, options: TimeValidatorOptions, key: string, attributes: any) => {\n    const otherTime = attributes[options.timeAttribute];\n    if (time <= otherTime) {\n        return options.message || `${options.timeAttribute} is before ${key}`;\n    }\n};\n\nvalidators.array = (value: any[], options: ArrayValidatorOptions, key: string, attributes: any) => {\n    return value.map(v => validate(v, options.constraints));\n};\n\nvalidators.object = (value: any, options: MapValidatorOptions, key: string, attributes: any) => {\n    return validate(value, options.constraints);\n};\n"]}